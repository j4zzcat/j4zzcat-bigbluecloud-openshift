#! /usr/bin/env bash

export DOCKER_IMAGE=j5zzcat/ibmcloud-cli:latest
export   C_REPO_DIR=/h/repo
export    C_CWD_DIR=/h/cwd
export   C_HOME_DIR=${C_REPO_DIR}/examples/openshift

if [ ! -f '/.dockerenv' ]; then
  # still on the host
  case $(uname) in
    Darwin) HOME_DIR=$(cd $(dirname "${0}")/.. ; pwd -P) ;;
    Linux)  HOME_DIR=$(realpath $(dirname "${0}")/..) ;;
    *)      echo "Sorry, platform $(uname) is not supported yet" ;;
  esac

  REPO_DIR=${HOME_DIR}/../..
  CWD_DIR=$(pwd)

  exec docker run --rm -it \
    -v ${CWD_DIR}:${C_CWD_DIR}:rw \
    -v ${REPO_DIR}:${C_REPO_DIR}:rw \
    -e IBMCLOUD_API_KEY=${IBMCLOUD_API_KEY} \
    -e IAAS_CLASSIC_USERNAME=${IAAS_CLASSIC_USERNAME} \
    -e IAAS_CLASSIC_API_KEY=${IAAS_CLASSIC_API_KEY} \
    -e IC_TIMEOUT=60 \
    -e IAAS_CLASSIC_TIMEOUT=60 \
    ${DOCKER_IMAGE} \
    ${C_HOME_DIR}/bin/mule ${@}

  exit ${?}

else
  # inside docker container
  CUT_LINE=$(cat ${C_HOME_DIR}/bin/mule | grep -n '#! /usr/bin/env ruby' | tail -1 | awk -F ':' '{print $1}')
  tail +${CUT_LINE} ${0} | tail -n +2 > /tmp/mule.rb
  cd ${C_HOME_DIR}
  ruby /tmp/mule.rb ${@}
  exit ${?}
fi

#! /usr/bin/env ruby

require 'tempfile'
require 'open3'
require 'docopt'
require 'ostruct'
require 'json'

HOME_DIR = ENV[ 'C_HOME_DIR' ]

class Mule

  class Terraform
    def initialize( cwd )
      @cwd = cwd
    end

    def init
      run 'terraform init'
    end

    def apply( targets = nil )
      run 'terraform apply -auto-approve'
    end

    def destroy( targets = nil )
      run 'terraform destroy -auto-approve'
    end

    def run( cmd )
      puts "Running '#{cmd}'..."

      status = nil
      Open3.popen2e( cmd, :chdir => @cwd ) do | stdin, stdout_err, wait_thread |
        while line = stdout_err.gets
          puts line
        end
        status = wait_thread.value
      end

      status.exitstatus
    end
  end # class Terraform

  class State
    def initialize( terraform_state_file, terraform_tfvars_files, topology_file )
      @terraform_state_file   = terraform_state_file
      @terraform_tfvars_files = terraform_tfvars_files
      @topology_file          = topology_file

      @cache = {}
    end

    def method_missing( m, *args, &block )
      return @cache[ m ] if @cache.include? m

      File.read( @topology_file ).each_line do | line |
        item, value = line.gsub( /\s+/, '' ).split '='
        return @cache[ m ] = value if m.to_s == item
      end

      result = %x[ cat #{@terraform_tfvars_files} | awk -F '=' '/#{m.to_s}.*=/{print $2}' ].chomp
      return result if result != ''

      raise
    end
  end # class

  class IBMCloudCLI
    def initialize( state )
      ENV[ 'IBMCLOUD_COLOR' ] = 'false'
      @state = state
      login
    end

    def login
      puts "Logging in to IBM Cloud..."
      %x[ ibmcloud login -r #{@state.region_name}
          ibmcloud is target --gen 2 ]
    end

    def is_instance_start( name, id )
      print "Starting instance '#{name}' id=#{id}..."
      rc = %x[ ibmcloud is instance-start #{id} 2>&1 >/dev/null
               echo ${?} ].chomp

      if rc == "0"
        puts " Ok"
      else
        puts " Error, rc=#{rc}"
      end
    end

    def is_instance_stop( name, id )
      print "Stopping instance '#{name}' id=#{id}..."
      rc = %x[ ibmcloud is instance-stop #{id} 2>&1 >/dev/null
               echo ${?} ].chomp

      if rc == "0"
        puts " Ok"
      else
        puts " Error, rc=#{rc}"
      end
    end

  end # class

  class Main
    @@usage = <<~DOC

      NAME:
        mule - Create a simple openshift v4.3 cluster on IBM Cloud

      USAGE:
        mule provision (infra|openshift)
        mule (start|restart|stop|status) [<host>|<role>]
        mule destroy [--clean]
        mule (cli|env|ssh <host>)

      OPTIONS:
        <host>  The name of the host (bastion|installer|load_balancer|nat_server
                bootstrap|master_1|master_2|master_3|worker_1|worker_2)
        <role>  The role of the host (infra|bootstrap|masters|workers)

      DOC

    def run()
      begin
        options = Docopt::docopt( @@usage )
      rescue Docopt::Exit => e
        puts @@usage
        exit 1
      end

      infra_role     = %w[ bastion installer load_balancer nat_server ]
      bootstrap_role = %w[ bootstrap ]
      masters_role   = %w[ master_1 master_2 master_3 ]
      workers_role   = %w[ worker_1 worker_2 ]
      all_hosts      = infra_role + bootstrap_role + masters_role + workers_role

      @state = Mule::State.new(
        terraform_state_file   = "#{HOME_DIR}/lib/terraform/terraform.tfstate",
        terraform_tfvars_files = "#{HOME_DIR}/lib/terraform/*.tfvars",
        topology_file          = "#{HOME_DIR}/topology" )

      if options[ 'cli' ]
        exec '/bin/bash'

      elsif options[ 'env' ]
        print 'export IBMCLOUD_API_KEY=$(security find-generic-password -l ibmcloud-api-key -w); '
        print 'export IAAS_CLASSIC_USERNAME=$(security find-generic-password -l ibmcloud-iaas-classic-api-key | awk -F \'=\' \'/acct/{print substr($2,2,length($2)-2)}\'); '
        print 'export IAAS_CLASSIC_API_KEY=$(security find-generic-password -l ibmcloud-iaas-classic-api-key -w)'

      elsif options[ 'ssh' ]
        host = options[ '<host>' ]
        host_pip = eval "@state.#{host}_pip"

        exec "cd #{HOME_DIR}/lib/terraform; ssh -o ProxyCommand=\"ssh -W %h:%p -o StrictHostKeyChecking=accept-new -i #{@state.bastion_key} root@#{@state.bastion_fip}\" -o StrictHostKeyChecking=accept-new -i #{@state.cluster_key} root@#{host_pip}"

      # elsif options[ 'start' ]
      #   cli = Mule::IBMCloudCLI.new @state
      #
      #   all_hosts.each do | server |
      #     id = eval "state.#{server}_id"
      #     cli.is_instance_start server, id
      #   end
      #
      # elsif options[ 'stop' ]
      #   cli = Mule::IBMCloudCLI.new @state
      #   all_hosts.each do | server |
      #     id = eval "state.#{server}_id"
      #     cli.is_instance_start server, id
      #   end

      elsif options[ 'provision' ]
        if options[ 'infra' ]
            terraform_dir = "#{HOME_DIR}/lib/terraform"
            t = Mule::Terraform.new "#{HOME_DIR}/lib/terraform"
            t.init
            t.apply
        elsif options[ 'openshift' ]
          puts 'Starting bootstrap helper...'
          remote_exec @state.installer_pip, "ruby /opt/openshift/bin/bootstrap_helper.rb >> ~/bootstrap_helper.log &"

          puts 'Rebooting into RHCOS...'
          remote_exec @state.bootstrap_pip, "curl http://#{@state.installer_pip}:7080/prepare/bootstrap | bash"
          remote_exec @state.master_1_pip,  "curl http://#{@state.installer_pip}:7080/prepare/master | bash"
          remote_exec @state.master_2_pip,  "curl http://#{@state.installer_pip}:7080/prepare/master | bash"
          remote_exec @state.master_3_pip,  "curl http://#{@state.installer_pip}:7080/prepare/master | bash"
          remote_exec @state.installer_pip, '/opt/openshift/bin/openshift-install --dir=/opt/openshift/install wait-for bootstrap-complete --log-level=info'
        end

      elsif options[ 'destroy' ]
        t = Mule::Terraform.new "#{HOME_DIR}/lib/terraform"
        rc = t.destroy

        if options[ '--clean' ] and rc == 0
          %x[ rm -rf #{HOME_DIR}/lib/terraform/.terraform #{HOME_DIR}/lib/terraform/terraform.tfstate* ]

        end
      end
    end # run()

    def remote_exec( host_pip, cmd )
      cmd = "ssh -o ProxyCommand=\"ssh -W %h:%p -o StrictHostKeyChecking=no -i #{@state.bastion_key} root@#{@state.bastion_fip}\" -o StrictHostKeyChecking=no -i #{@state.cluster_key} root@#{host_pip} '#{cmd}'"

      status = nil
      Open3.popen2e( cmd, :chdir => "#{HOME_DIR}/lib/terraform" ) do | stdin, stdout_err, wait_thread |
        while line = stdout_err.gets
          puts line
        end
        status = wait_thread.value
      end

      status.exitstatus
    end
  end # class Main

end # class Mule

Mule::Main.new.run
