#! /usr/bin/env bash

export DOCKER_IMAGE=j4zzcat/bigbluecloud-runtime:latest
export  C_REPOS_DIR=/h/repos
export   C_REPO_DIR=${C_REPOS_DIR}/sud
export    C_CWD_DIR=/h/cwd
export   C_HOME_DIR=${C_REPO_DIR}

if [ ! -f '/.dockerenv' ]; then
  # still on the host
  case $(uname) in
    Darwin) HOME_DIR=$(cd $(dirname "${0}")/.. ; pwd -P) ;;
    Linux)  HOME_DIR=$(realpath $(dirname "${0}")/..) ;;
    *)      echo "Sorry, platform $(uname) is not supported yet" ;;
  esac

  REPO_DIR=${HOME_DIR}
  CWD_DIR=$(pwd)

  exec docker run --rm -it \
    -v ${CWD_DIR}:${C_CWD_DIR}:rw \
    -v ${REPO_DIR}:${C_REPO_DIR}:rw \
    -v ${HOME_DIR}/../j4zzcat-bigbluecloud:${C_REPOS_DIR}/j4zzcat-bigbluecloud \
    -e RUBYLIB=${C_REPOS_DIR}/j4zzcat-bigbluecloud/src/client/lib \
    -e IBMCLOUD_API_KEY=${IBMCLOUD_API_KEY} \
    -e IAAS_CLASSIC_USERNAME=${IAAS_CLASSIC_USERNAME} \
    -e IAAS_CLASSIC_API_KEY=${IAAS_CLASSIC_API_KEY} \
    -e IC_TIMEOUT=60 \
    -e IAAS_CLASSIC_TIMEOUT=60 \
    ${DOCKER_IMAGE} \
    ${C_HOME_DIR}/bin/mule ${@}

  exit ${?}

else
  # inside docker container
  CUT_LINE=$(cat ${C_HOME_DIR}/bin/mule | grep -n '#! /usr/bin/env ruby' | tail -1 | awk -F ':' '{print $1}')
  tail +${CUT_LINE} ${0} | tail -n +2 > /tmp/mule.rb
  cd ${C_HOME_DIR}
  ruby /tmp/mule.rb ${@}
  exit ${?}
fi

#! /usr/bin/env ruby

require 'tempfile'
require 'open3'
require 'docopt'
require 'ostruct'
require 'json'
require 'bigbluecloud'

HOME_DIR = ENV[ 'C_HOME_DIR' ]

module Mule
  class Main
    @@usage = <<~DOC

      NAME:
        mule - Create a simple openshift v4.3 cluster on IBM Cloud

      USAGE:
        mule provision infra [-v] --name=<name> --domain=<domain> --region=<region>
          [--zone=<zone>] [--data-center=<dc>] [--resource-group-name=<name>]
          [--transit-gateway-id=<id>]
        mule provision openshift [-v] --pull-secret=<key>
        mule (start|restart|stop|status) [<host>|<role>] [-v]
        mule destroy [--clean] [-v]
        mule (cli|env|ssh <host>)

      OPTIONS:
        <host>  The name of the host (bastion|installer|load_balancer|nat_server
                bootstrap|master_1|master_2|master_3|worker_1|worker_2)
        <role>  The role of the host (infra|bootstrap|masters|workers)

      DOC

    def initialize()
      @log = Mule::Logger.new
    end

    def parse_and_run()
      begin
        options = Docopt::docopt( @@usage )
      rescue Docopt::Exit => e
        puts @@usage
        exit 1
      end

      if options[ 'cli' ]
        exec '/bin/bash'

      elsif options[ 'env' ]
        print 'export IBMCLOUD_API_KEY=$(security find-generic-password -l ibmcloud-api-key -w); '
        print 'export IAAS_CLASSIC_USERNAME=$(security find-generic-password -l ibmcloud-iaas-classic-api-key | awk -F \'=\' \'/acct/{print substr($2,2,length($2)-2)}\'); '
        print 'export IAAS_CLASSIC_API_KEY=$(security find-generic-password -l ibmcloud-iaas-classic-api-key -w)'

      elsif options[ 'ssh' ]
        host = options[ '<host>' ]
        do_ssh( host )

      elsif options[ 'provision' ]
        if options[ 'infra' ]
          do_provision_infra(
            options[ '--name' ],
            options[ '--domain' ],
            options[ '--region' ],
            options[ '--zone' ],
            options[ '--data-center' ],
            options[ '--resource-group-name' ],
            options[ '--transit-gateway-id' ]
          )

        elsif options[ 'openshift' ]
          do_provision_openshift()
        end

      elsif options[ 'destroy' ]
        do_destroy()
      end # if ...
    rescue => e
      @log.error e
    end # run()

    def do_provision_infra( name, domain, region, zone, datacenter, resource_group_name, transit_gateway_id )
      @log.info "Validating input"

      valid_name           = /^[a-zA-Z0-9\-]+$/
      valid_domain         = /^(([a-zA-Z]{1})|([a-zA-Z]{1}[a-zA-Z]{1})|([a-zA-Z]{1}[0-9]{1})|([0-9]{1}[a-zA-Z]{1})|([a-zA-Z0-9][a-zA-Z0-9\-_]{1,61}[a-zA-Z0-9]))\.([a-zA-Z]{2,}|[a-zA-Z0-9-]{2,30}\.[a-zA-Z]{2,3})$/
      valid_region         = %w[ us-south us-east eu-gb eu-de ]
      valid_zone           = %w[ 1 2 3 ]
      valid_datacenter     = { 'us-south' => %w[ dal01 dal02 dal05 dal06 dal07 dal09 dal10 dal12 dal13 ],
                               'us-east'  => %w[ wdc01 wdc04 wdc06 wdc07 ],
                               'eu-gb'    => %w[ lon02 lon04 lon05 lon06 ],
                               'eu-fr'    => %w[ fra02 fra04 fra05 ] }
      valid_resource_group = /^[a-zA-Z0-9\-_ ]+$/

      zone       = valid_zone.sample if zone.nil?
      datacenter = valid_datacenter[ region ].sample if datacenter.nil?

      raise "invalid name"           if ( valid_name =~ name ).nil?
      raise "invalid domain"         if ( valid_domain =~ domain ).nil?
      raise "invalid region"         if ! valid_region.include? region
      raise "invalid zone"           if ! valid_zone.include? zone
      raise "invalid datacenter"     if ! valid_datacenter[ region ].include? datacenter

      @log.info "Logging in to IBM Cloud..."
      cli = BigBlueCloud::Cli.new(
        region,
        ENV[ 'IBMCLOUD_API_KEY' ],
        ENV[ 'IAAS_CLASSIC_USERNAME' ],
        ENV[ 'IAAS_CLASSIC_API_KEY' ] )


      # if resource_group_name.nil?
      #   cli.login
      #   resource_group_name = "#{name}-cluster"
      #   cli.exec resource_group_name
      # end

      if transit_gateway_id.nil?
        cli.login
        locations = cli.execute 'tg locations', raw: true
        locations.each_line do | location |
          puts location
        end
      end

      exit


      s = Mule::State.new Dir.cwd
      s.vars( {
        'name'                => name,
        'domain_name'         => domain,
        'region_name'         => region,
        'zone_name'           => zone,
        'datacenter_name'     => datacenter,
        'infra_key'           => infra_key,
        'bastion_key'         => bastion_key,
        'resource_group_name' => resource_group_name,
        'transit_gateway_id'  => transit_gateway_id } )

      t = Mule::Terraform.new s, "#{HOME_DIR}/lib/terraform"
      t.apply 'vpc', %w[
        ibm_is_ssh_key.infra_key
        ibm_is_vpc.vpc
        ibm_is_security_group.vpc_default ]

      t.apply 'bastion', %w[
        ibm_is_ssh_key.bastion_key
        ibm_is_instance.bastion
        ibm_is_security_group.bastion_default ]

      t.apply 'installer', 'ibm_is_instance.installer'
      t.apply 'load_balancer', 'ibm_is_instance.load_balancer'
      t.apply 'nat_server', 'ibm_compute_vm_instance.nat_server'

    end
  end # class Main



  class Logger
    def info( s )
      puts s
    end

    def error( s )
      puts "Error: #{s}"
    end
  end

  class Utils
    def self.remote_exec( host_pip, cmd )
      cmd = "ssh -o ProxyCommand=\"ssh -W %h:%p -o StrictHostKeyChecking=no -i #{@state.bastion_key} root@#{@state.bastion_fip}\" -o StrictHostKeyChecking=no -i #{@state.cluster_key} root@#{host_pip} '#{cmd}'"

      status = nil
      Open3.popen2e( cmd, :chdir => "#{HOME_DIR}/lib/terraform" ) do | stdin, stdout_err, wait_thread |
        while line = stdout_err.gets
          puts line
        end
        status = wait_thread.value
      end

      status.exitstatus
    end
  end # class Utils

  class Terraform
    def initialize( cwd )
      @cwd = cwd
    end

    def init
      run 'terraform init'
    end

    def apply( targets = nil )
      run 'terraform apply -auto-approve'
    end

    def destroy( targets = nil )
      run 'terraform destroy -auto-approve'
    end

    def run( cmd )
      puts "Running '#{cmd}'..."

      status = nil
      Open3.popen2e( cmd, :chdir => @cwd ) do | stdin, stdout_err, wait_thread |
        while line = stdout_err.gets
          puts line
        end
        status = wait_thread.value
      end

      status.exitstatus
    end
  end # class Terraform

  class State
    def initialize( terraform_state_file, terraform_tfvars_files, hosts_file)
      @terraform_state_file   = terraform_state_file
      @terraform_tfvars_files = terraform_tfvars_files
      @hosts_file             = topology_file

      @cache = {}
    end

    def method_missing( m, *args, &block )
      return @cache[ m ] if @cache.include? m

      File.read( @hosts_file).each_line do | line |
        item, value = line.gsub( /\s+/, '' ).split '='
        return @cache[ m ] = value if m.to_s == item
      end

      result = %x[ cat #{@terraform_tfvars_files} | awk -F '=' '/#{m.to_s}.*=/{print $2}' ].chomp
      return result if result != ''

      raise
    end
  end # class

end # module Mule

Mule::Main.new.parse_and_run
